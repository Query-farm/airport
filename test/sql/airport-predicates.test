# name: test/sql/airport.test
# description: test airport extension
# group: [airport]

# Require statement will ensure this test is run with this extension loaded
require airport

# Create the initial secret, the token value doesn't matter.
statement ok
CREATE SECRET airport_testing (
  type airport,
  auth_token uuid(),
  scope 'grpc+tls://airport-ci.query.farm');

# Reset the test server
statement ok
CALL airport_action('grpc+tls://airport-ci.query.farm', 'reset');

# Create the initial database
statement ok
CALL airport_action('grpc+tls://airport-ci.query.farm', 'create_database', 'test1');

statement ok
ATTACH 'test1' (TYPE  AIRPORT, location 'grpc+tls://airport-ci.query.farm');

statement ok
SET arrow_lossless_conversion = true;

statement ok
CREATE SCHEMA test1.test_predicate_pushdown;

statement ok
use test1.test_predicate_pushdown;

statement ok
CREATE table events(
    id integer,
    event_time timestamp,
    details STRUCT(level text, body text, impact integer, colors varchar[]),
    switches integer[])


statement ok
INSERT INTO events values
(1, '2020-08-20 12:32:45', {'level': 'warning', 'body': 'foo', 'impact': 4, 'colors': ['green', 'blue']}, [1,2,3]),
(2, '2020-08-21 12:32:45', {'level': 'error', 'body': 'bar', 'impact': 5, 'colors': ['green', 'yellow']}, [5, 6]),
(3, '2020-08-22 12:32:45', {'level': 'warning', 'body': 'foo 2', 'impact': 3, 'colors': ['green', 'red']}, null);

query I
select id from events where details.level = 'warning'
----
1
3


query I
select id from events where length(details.level) = 7
----
1
3

query I
select id from events where details.impact-1 <= 2
----
3

query I
select id from events where age(event_time) > interval '3 years'
----
1
2
3

query I
select id from events where switches[1] = 5
----
2

query I
select id from events where switches[1]+switches[2] = 3
----
1


query I
select id from events where details.level like 'w%n%'
----
1
3


query I
select id from events where 'red' in details.colors
----
3


query I
select id from events where details.colors in (['green', 'yellow'])
----
2



query I
select id from events where details.level not in ('info')
----
1
2
3

query I
select id from events where details.level not in ('info') and details.colors in (['green', 'yellow'])
----
2



statement ok
CREATE table mappings(
    id integer,
    mapping MAP(string, string)
)


statement ok
insert into mappings values (1, MAP {'color': 'red', 'location': 'NYC'});

query IT
select id, mapping from mappings
----
1	{color=red, location=NYC}


query IT
select id, mapping from mappings where mapping.color = 'red'
----
1	{color=red, location=NYC}


query IT
select id, mapping from mappings where mapping.color ilike 'r%'
----
1	{color=red, location=NYC}


query IT
select id, mapping from mappings where {'color': mapping.color} in ({'color': 'red'})
----
1	{color=red, location=NYC}


query IT
select id, mapping from mappings where mapping in (map {'color': 'red', 'location': 'NYC'})
----
1	{color=red, location=NYC}


query IT
select id, mapping from mappings where mapping in (map {'color': 'red', 'location': 'NYC'})
----
1	{color=red, location=NYC}

# Reset the test server
statement ok
CALL airport_action('grpc+tls://airport-ci.query.farm', 'reset');

