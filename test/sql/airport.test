# name: test/sql/airport.test
# description: test airport extension
# group: [airport]

require httpfs

require airport

# Require test server URL
require-env AIRPORT_TEST_SERVER

# Create the initial secret, the token value doesn't matter.
statement ok
CREATE SECRET airport_testing (
  type airport,
  auth_token uuid(),
  scope '${AIRPORT_TEST_SERVER}');

# Reset the test server
statement ok
CALL airport_action('${AIRPORT_TEST_SERVER}', 'reset');

# Create the initial database
statement ok
CALL airport_action('${AIRPORT_TEST_SERVER}', 'create_database', 'test1');

statement ok
ATTACH 'test1' (TYPE  AIRPORT, location '${AIRPORT_TEST_SERVER}');

statement ok
CREATE SCHEMA test1.test_schema;

statement ok
DROP SCHEMA test1.test_schema;

statement ok
CREATE SCHEMA test1.test_schema;

statement ok
use test1.test_schema;

statement ok
SET arrow_lossless_conversion = true;

statement ok
CREATE TABLE switches (
    status boolean
);

statement ok
insert into switches values (false), (true), (false), (true), (null);

statement ok
CREATE TABLE employees (
    name STRING,
    age INT,
    active boolean
);

statement ok
INSERT INTO employees (name, age, active) VALUES ('John Doe', 30, True);

query ITT
SELECT name, age, active FROM employees;
----
John Doe	30	1

statement ok
INSERT INTO employees (name, age) VALUES ('Jane Smith', 25);

query I
SELECT sum(age) FROM employees;
----
55

statement ok
DROP TABLE employees;

statement ok
CREATE TABLE employees (
    name STRING,
    age INT
);

statement ok
INSERT INTO employees (name, age) VALUES ('John Doe', 30),
('Jane Smith', 25);

query TI
SELECT name, age FROM employees order by name;
----
Jane Smith	25
John Doe	30

statement ok
CREATE TABLE employees_2 (
    name STRING,
    age INT
);

statement ok
INSERT INTO employees_2 (name, age) VALUES ('Alice Johnson', 28),
('Bob Brown', 35);

query TI
SELECT name, age FROM employees_2 order by age
----
Alice Johnson	28
Bob Brown	35

query TI
SELECT name, age FROM employees union select name, age from employees_2 order by name
----
Alice Johnson	28
Bob Brown	35
Jane Smith	25
John Doe	30

query I
SELECT count(*) FROM employees, employees_2;
----
4

statement ok
INSERT INTO employees (name, age)
SELECT name, age FROM employees_2;

query I
SELECT count(*) FROM employees;
----
4

query TI
SELECT * FROM employees union SELECT * from employees_2 order by 1, 2
----
Alice Johnson	28
Bob Brown	35
Jane Smith	25
John Doe	30

statement ok
CREATE TABLE employees_all (
    name STRING,
    age INT
);

statement ok
INSERT INTO employees_all SELECT * FROM employees union SELECT * from employees_2 order by 1, 2

query TI
SELECT * FROM employees_all union SELECT * from employees_2 order by 1, 2
----
Alice Johnson	28
Bob Brown	35
Jane Smith	25
John Doe	30

statement ok
SUMMARIZE employees_all

statement ok
ANALYZE

statement ok
CREATE TABLE employees_cta_1 as select * from employees_all

query TI
SELECT * FROM employees_cta_1 order by 1, 2
----
Alice Johnson	28
Bob Brown	35
Jane Smith	25
John Doe	30

statement ok
CREATE TABLE employees_cta_2 as select * from employees union select * from employees_2

query TI
SELECT * FROM employees_cta_2 order by 1, 2
----
Alice Johnson	28
Bob Brown	35
Jane Smith	25
John Doe	30

statement ok
DROP TABLE employees_2;

statement ok
SELECT count(*) FROM employees;

# This should remove all rows from the table.
statement ok
DELETE FROM employees;

# There should be no rows present anymore in the table.
query IT
SELECT rowid, name FROM employees;
----

query TI
INSERT INTO employees (name, age) VALUES
('John Doe', 30),
('Jane Smith', 25) RETURNING name, age;
----
John Doe	30
Jane Smith	25

query TI
DELETE FROM employees
WHERE name = 'John Doe' RETURNING name, age;
----
John Doe	30

query TI
SELECT name, age FROM employees;
----
Jane Smith	25

statement ok
INSERT INTO employees (name, age) VALUES
('John Doe', 30);

statement ok
UPDATE employees
set name = 'Emily Davis', age=102 where name = 'Jane Smith';

query TI
SELECT name, age FROM employees order by name;
----
Emily Davis	102
John Doe	30

statement ok
DELETE FROM employees;

statement ok
INSERT INTO employees (name, age) VALUES
('John Doe', 30);

query IT
UPDATE employees
set name = 'Emily Davis', age=102 where name = 'John Doe'
RETURNING age, name;
----
102	Emily Davis

query IT
UPDATE employees
set name = 'Jen Kelly'
RETURNING age, name;
----
102	Jen Kelly

query IT
SELECT name, age FROM employees order by 1, 2;
----
Jen Kelly	102

statement ok
ALTER TABLE employees
ADD COLUMN location STRING;

query ITT
SELECT age, name, location FROM employees order by 1, 2;
----
102	Jen Kelly	NULL

statement ok
update employees set location = 'NYC';

query ITT
SELECT age, name, location FROM employees order by 1, 2;
----
102	Jen Kelly	NYC

statement ok
ALTER TABLE employees
DROP COLUMN location;

statement error
SELECT age, name, location FROM employees order by 1, 2;
----
Binder Error: Referenced column "location" not found in FROM clause!

query IT
SELECT age, name FROM employees order by 1, 2;
----
102	Jen Kelly

statement ok
ALTER TABLE employees
ADD COLUMN location STRING;

statement ok
update employees set location = 'NYC';

statement ok
ALTER TABLE employees
RENAME COLUMN location TO city;


query ITT
SELECT age, name, city FROM employees order by 1, 2;
----
102	Jen Kelly	NYC

statement ok
ALTER TABLE employees RENAME TO workers;

statement error
SELECT age, name, location FROM employees order by 1, 2;
----
Catalog Error: Table with name employees does not exist!

query ITT
SELECT age, name, city FROM workers order by 1, 2;
----
102	Jen Kelly	NYC

statement ok
ALTER TABLE workers
ALTER COLUMN city SET DEFAULT 'Princeton';

statement ok
insert into workers (name, age, city) values ('John Doe', 30, 'NYC');

statement ok
insert into workers (name, age) values ('Elliot', 30);

query ITT
SELECT age, name, city FROM workers order by 1, 2;
----
30	Elliot	Princeton
30	John Doe	NYC
102	Jen Kelly	NYC

statement ok
ALTER TABLE workers
ALTER age TYPE BIGINT;

query ITT
SELECT age, name, city FROM workers order by 1, 2;
----
30	Elliot	Princeton
30	John Doe	NYC
102	Jen Kelly	NYC

statement ok
ALTER TABLE workers
ALTER age set not null;

statement ok
update workers set age = age + 1;

query ITT
SELECT age, name, city FROM workers order by 1, 2;
----
31	Elliot	Princeton
31	John Doe	NYC
103	Jen Kelly	NYC

statement ok
ALTER TABLE workers
ALTER age drop not null;

statement ok
update workers set age = null where age = 31;

query ITT
SELECT age, name, city FROM workers order by 1, 2;
----
103	Jen Kelly	NYC
NULL	Elliot	Princeton
NULL	John Doe	NYC

statement ok
ALTER TABLE workers
add column address STRUCT(
    street TEXT
);

statement ok
insert into workers (name, age, city, address) values ('Mary Brown', 30, 'NYC', {'street': 'value1'});


query ITTT
SELECT age, name, city, address FROM workers order by 1, 2;
----
30	Mary Brown	NYC	{'street': value1}
103	Jen Kelly	NYC	NULL
NULL	Elliot	Princeton	NULL
NULL	John Doe	NYC	NULL

statement ok
set arrow_lossless_conversion = true;

statement ok
create table products (
    description text,
    id uuid,
    counter hugeint
);

statement ok
insert into products (description, id) values ('product1', '123e4567-e89b-12d3-a456-426614174000');

statement ok
update products set counter = 1234567890123456789;

query TII
select description, id, counter from products;
----
product1	123e4567-e89b-12d3-a456-426614174000	1234567890123456789

statement ok
ATTACH 'test1' as test2 (TYPE  AIRPORT, location '${AIRPORT_TEST_SERVER}');

query ITTT
SELECT age, name, city, address FROM test2.test_schema.workers order by 1, 2;
----
30	Mary Brown	NYC	{'street': value1}
103	Jen Kelly	NYC	NULL
NULL	Elliot	Princeton	NULL
NULL	John Doe	NYC	NULL

# Test that the extension uses the proper database name even if it has been
# aliased.
statement ok
CREATE TABLE test2.test_schema.factories(
    name STRING,
    city text
);

statement ok
INSERT INTO test2.test_schema.factories (name, city) VALUES ('Factory1', 'NYC');

query TT
SELECT name, city FROM test2.test_schema.factories order by 1, 2;
----
Factory1	NYC

statement ok
ALTER TABLE test2.test_schema.factories ADD COLUMN value double;

statement ok
DROP TABLE test2.test_schema.factories;

query T
DELETE from test2.test_schema.workers where age = 103
RETURNING name;
----
Jen Kelly

# Test some scalar functions.
query T
select test1.utils.test_uppercase('test string');
----
TEST STRING

statement ok
create table people_names(
    name text
);

statement ok
insert into people_names values ('Alice'), ('Bob'), ('Charlie'), ('Diana'), ('Eve'), ('Frank');

query T
select test1.utils.test_uppercase(name) from people_names
----
ALICE
BOB
CHARLIE
DIANA
EVE
FRANK

query I
select test1.utils.test_add(5, 6);
----
11

query I
select test1.utils.test_add(t.j, 10) from (select unnest([v for v in range(5)]) j) t;
----
10
11
12
13
14

query I
select test1.utils.test_any_type(true);
----
1

query T
select test1.utils.test_any_type('hello world');
----
hello world

# test some table returning functions.
query T
select * from test1.utils.test_echo('hello world2');
----
hello world2

query T
select * from test1.utils.test_repeat('hello world with repetition', 5);
----
hello world with repetition
hello world with repetition
hello world with repetition
hello world with repetition
hello world with repetition

query T
select * from test1.utils.test_dynamic_schema('hello world with dynamic schema');
----
hello world with dynamic schema

statement ok
select * from test1.utils.test_dynamic_schema(now());

query R
select * from test1.utils.test_dynamic_schema(55.07224);
----
55.07224

query T
select * from test1.utils.test_dynamic_schema(struct_pack(key1 := 'value1', key2 := 42));
----
{'key1': value1, 'key2': 42}

#-- Test with the named parameters
query TTRT
select * from test1.utils.test_dynamic_schema_named_parameters('Elliott', 555.2222, 'Princeton', location='Main Street');
----
Elliott	Main Street	555.2222	Princeton

# Table in/out functions

query TT
select * from test1.utils.test_table_in_out('Sloane', (select name from workers)) order by 1, 2
----
Sloane	Elliot
Sloane	John Doe
Sloane	Mary Brown
last	row

query I
select count(*) from test1.utils.test_table_in_out_long((select name from workers)) order by 1;
----
30

query II
select count(distinct multiplier), count(distinct value) from test1.utils.test_table_in_out_huge((select name from workers)) order by 1;
----
5000	13

query I
select result::int from test1.utils.test_repeat('123', 5);
----
123
123
123
123
123

query IIIIIIIIIIIIIIIIIIII
select * from test1.utils.test_wide(10);
----
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19

query II
select result_3, result_5+result_6 from test1.utils.test_wide(10)
where result_6 > 5;
----
3	11
3	11
3	11
3	11
3	11
3	11
3	11
3	11
3	11
3	11

query IIIIIIIIIIIIIIIIIIII
select * from test1.utils.test_table_in_out_wide('hello', (select unnest(range(10))));
----
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19

statement ok
create table test1.test_schema.wide(
    result_1 int,
    result_2 int,
    result_3 int,
    result_4 int,
    result_5 int,
    result_6 int,
    result_7 int,
    result_8 int,
    result_9 int,
    result_10 int,
    result_11 int,
    result_12 int,
    result_13 int,
    result_14 int,
    result_15 int,
    result_16 int,
    result_17 int,
    result_18 int,
    result_19 int
);

statement ok
insert into test1.test_schema.wide (
    select
    1,2,3,4,5,6,7,8,9,10,
    11,12,13,14,15,16,17,18,19
    from unnest(range(20)));

query IIIIIIIIIIIIIIIIIII
select * from test1.test_schema.wide;
----
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19

statement ok
create table test1.test_schema.wide_copy as select * from test1.test_schema.wide;

query IIIIIIIIIIIIIIIIIII
select * from test1.test_schema.wide_copy;
----
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19
1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17 	18	19


query II
select result_8, result_19 from test1.test_schema.wide;
----
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19

query II
select result_8, result_19 from test1.utils.test_table_in_out_wide('hello', (select * from test1.test_schema.wide));
----
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19
8	19

# Time travel test_schema

statement ok
create table test1.test_schema.version_test (name text);

statement ok
insert into test1.test_schema.version_test (name) values ('Elliott');

statement ok
insert into test1.test_schema.version_test (name) values ('Scarlet');

query T
select name from test1.test_schema.version_test AT (VERSION => 0);
----


query T
select name from test1.test_schema.version_test AT (VERSION => 2) order by 1
----
Elliott
Scarlet

query T
select name from test1.test_schema.version_test AT (VERSION => 1) order by 1
----
Elliott


#Add a new column but check that we can still time travel around.
statement ok
alter table test1.test_schema.version_test add column age int;

query TI
select name, age from test1.test_schema.version_test AT (VERSION => 3) order by 1, 2
----
Elliott	NULL
Scarlet	NULL

query T
select name from test1.test_schema.version_test AT (VERSION => 2) order by 1
----
Elliott
Scarlet

statement error
select age from test1.test_schema.version_test AT (VERSION => 2)
----
Binder Error: Referenced column "age" not found in FROM clause!

# Check that statistics work
statement ok
select * from test1.static_data.employees;

query I
select count(distinct id) from test1.static_data.big_chunk
----
100000

statement ok
select airport_version();

# Reset the test server
statement ok
CALL airport_action('${AIRPORT_TEST_SERVER}', 'reset');

