diff --git a/cpp/src/arrow/flight/serialization_internal.cc b/cpp/src/arrow/flight/serialization_internal.cc
index 10600d055..c238e0e40 100644
--- a/cpp/src/arrow/flight/serialization_internal.cc
+++ b/cpp/src/arrow/flight/serialization_internal.cc
@@ -33,7 +33,7 @@ struct overloaded : Ts... {
   using Ts::operator()...;
 };
 template <class... Ts>  // CTAD will not be needed for >=C++20
-overloaded(Ts...)->overloaded<Ts...>;
+overloaded(Ts...) -> overloaded<Ts...>;

 namespace arrow {
 namespace flight {
@@ -255,7 +255,15 @@ arrow::Result<FlightInfo> FromProto(const pb::FlightInfo& pb_info) {
   FlightInfo::Data info;
   RETURN_NOT_OK(FromProto(pb_info.flight_descriptor(), &info.descriptor));

-  info.schema = pb_info.schema();
+  // Decompress the schema.
+  auto codec = arrow::util::Codec::Create(arrow::Compression::ZSTD).ValueOrDie();
+  auto decompressed_schema = *AllocateResizableBuffer(pb_info.schema_size());
+
+  auto decompress_result = codec->Decompress(
+      pb_info.schema().size(), reinterpret_cast<const uint8_t*>(pb_info.schema().data()),
+      pb_info.schema_size(), decompressed_schema->mutable_data());
+
+  info.schema = decompressed_schema->ToString();

   info.endpoints.resize(pb_info.endpoint_size());
   for (int i = 0; i < pb_info.endpoint_size(); ++i) {
@@ -294,7 +302,29 @@ Status ToProto(const FlightInfo& info, pb::FlightInfo* pb_info) {
   // clear any repeated fields
   pb_info->clear_endpoint();

-  pb_info->set_schema(info.serialized_schema());
+  // pb_info->set_schema(info.serialized_schema());
+
+  // We should compress this schema.
+
+  auto codec = arrow::util::Codec::Create(arrow::Compression::ZSTD, 1).ValueOrDie();
+
+  auto serialized_schema = info.serialized_schema();
+  // Compress the data
+
+  int64_t max_compressed_len;
+  max_compressed_len =
+      codec->MaxCompressedLen(serialized_schema.size(),
+                              reinterpret_cast<const uint8_t*>(serialized_schema.data()));
+  auto compressed_schema = *AllocateResizableBuffer(max_compressed_len);
+  auto compressed_schema_len =
+      *codec->Compress(serialized_schema.size(),
+                       reinterpret_cast<const uint8_t*>(serialized_schema.data()),
+                       max_compressed_len, compressed_schema->mutable_data());
+  RETURN_NOT_OK(compressed_schema->Resize(compressed_schema_len));
+
+  // Set the decompressed schema size.
+  pb_info->set_schema_size(serialized_schema.size());
+  pb_info->set_schema(compressed_schema.get()->data(), compressed_schema_len);

   // descriptor
   RETURN_NOT_OK(ToProto(info.descriptor(), pb_info->mutable_flight_descriptor()));
diff --git a/format/Flight.proto b/format/Flight.proto
index 4963e8c09..fc904d65c 100644
--- a/format/Flight.proto
+++ b/format/Flight.proto
@@ -377,6 +377,11 @@ message FlightInfo {
    * but there is none required by the spec.
    */
   bytes app_metadata = 7;
+
+  /*
+    * The decompressed size of the schema in bytes.
+    */
+  int64 schema_size = 8;
 }

 /*
